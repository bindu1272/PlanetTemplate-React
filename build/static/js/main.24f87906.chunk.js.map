{"version":3,"sources":["components/Planets/Planet.js","components/Planets/Planets.js","App.js","serviceWorker.js","index.js"],"names":["Planet","props","state","planets","mercury","jupiter","venus","earth","mars","ceres","saturn","pluto","haumea","makemake","eris","className","src","this","planet","id","name","isFavourite","onClick","addFavourite","index","Component","Index","favourite","allPlanets","setState","th","is","axios","get","then","res","data","catch","error","console","log","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iQAqCeA,G,wDAnCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAM,CACPC,QAAU,CACNC,QAAU,iEACVC,QAAU,6HACVC,MAAQ,qGACRC,MAAQ,mGACRC,KAAO,wPACPC,MAAQ,+DACRC,OAAS,oEACTC,MAAQ,mHACRC,OAAS,0GACTC,SAAW,iFACXC,KAAO,+EAdA,E,qDAkBT,IAAD,OACL,OACI,sBAAKC,UAAU,SAAf,UACI,qBAAKC,IAAKC,KAAKf,MAAMC,QAAQc,KAAKhB,MAAMiB,OAAOC,IAAKJ,UAAU,eAC9D,qBAAKA,UAAU,iBAAf,SACKE,KAAKhB,MAAMiB,OAAOE,OAGnBH,KAAKhB,MAAMiB,OAAOG,YACd,wBAAQN,UAAU,gBAAgBO,QAAW,kBAAI,EAAKrB,MAAMsB,aAAa,EAAKtB,MAAMuB,OAAM,IAA1F,8BAEA,wBAAQT,UAAU,gBAAgBO,QAAW,kBAAI,EAAKrB,MAAMsB,aAAa,EAAKtB,MAAMuB,OAAM,IAA1F,kC,GA9BHC,cCwDNC,E,kDApDX,aAAc,IAAD,8BACT,gBAiBJH,aAAe,SAACC,EAAMG,GAClB,IAAIxB,EAAU,EAAKD,MAAM0B,WACzBzB,EAAQqB,GAAOH,YAAcM,EAC7B,EAAKE,SAAS,CACVD,WAAazB,KApBjB2B,GACAC,GAAG7B,MAAM,CACL0B,WAAa,IAJR,E,gEAOO,IAAD,OACfI,IAAMC,IAAI,qDACTC,MAAK,SAAAC,GACF,EAAKN,SAAS,CACVD,WAAaO,EAAIC,UAGxBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,+BAUX,IAAD,OACJ,OACI,eAAC,WAAD,WACI,sBAAKvB,UAAU,oBAAf,UACI,qBAAKA,UAAU,QAAf,yBACA,qBAAKA,UAAU,cAAf,SAEQE,KAAKf,MAAM0B,YAAcX,KAAKf,MAAM0B,WAAWa,KAAI,SAACvB,EAAOM,GACvD,QAAO,OAACN,QAAD,IAACA,OAAD,EAACA,EAAQG,cAAe,cAAC,EAAD,CAAQH,OAAQA,EAAQM,MAASA,EAAOD,aAAc,EAAKA,uBAK1G,sBAAKR,UAAU,oBAAf,UACI,qBAAKA,UAAU,QAAf,+BACA,qBAAKA,UAAU,cAAf,SAEQE,KAAKf,MAAM0B,YAAcX,KAAKf,MAAM0B,WAAWa,KAAI,SAACvB,EAAOM,GACvD,OAAa,OAANN,QAAM,IAANA,OAAA,EAAAA,EAAQG,cAAe,cAAC,EAAD,CAAQH,OAAQA,EAAQM,MAASA,EAAOD,aAAc,EAAKA,8B,GA5CrGE,aCQLiB,E,uKARX,OACE,8BACE,cAAC,EAAD,U,GAJUjB,aCUEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoB,c","file":"static/js/main.24f87906.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Planet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            planets : {\r\n                mercury : \"https://nineplanets.org/wp-content/uploads/2019/09/mercury.png\",\r\n                jupiter : \"https://www.wamc.org/sites/wamc/files/201912/jupiter__image_taken_by_nasa_s_hubble_space_telescope__june_2019_-_edited.jpg\",\r\n                venus : \"https://upload.wikimedia.org/wikipedia/commons/a/a9/PIA23791-Venus-NewlyProcessedView-20200608.jpg\",\r\n                earth : \"https://mediad.publicbroadcasting.net/p/shared/npr/styles/x_large/nprshared/201805/339823601.jpg\",\r\n                mars : \"https://www.treehugger.com/thmb/rT1CBggFcgbGb4oQmw4eIbgAMR0=/1000x893/filters:fill(auto,1)/__opt__aboutcom__coeus__resources__content_migration__mnn__images__2018__07__MarsTrueColorOSIRISRosettaSpacecraft2007-56b72b3940224d2c8b845f7a3e47d99d.jpg\",\r\n                ceres : \"https://cdn.mos.cms.futurecdn.net/7yojSnrjnEZHoXtA2XLHxF.jpg\",\r\n                saturn : \"https://c.files.bbci.co.uk/17073/production/_105232349_saturn.jpg\",\r\n                pluto : \"https://thumbs.dreamstime.com/b/dwarf-planet-pluto-view-space-nebula-image-elements-furnished-nasa-170639349.jpg\",\r\n                haumea : \"https://image.shutterstock.com/image-illustration/haumea-planet-space-3d-rendering-260nw-1747478162.jpg\",\r\n                makemake : \"https://solarsystem.nasa.gov/system/resources/list_images/2374_makemake_th.jpg\",\r\n                eris : \"https://solarsystem.nasa.gov/system/resources/list_images/2390_eris_th.jpg\"\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"planet\">\r\n                <img src={this.state.planets[this.props.planet.id]} className=\"planet-img\" />\r\n                <div className=\"planet-heading\">\r\n                    {this.props.planet.name}\r\n                </div>\r\n                {\r\n                    this.props.planet.isFavourite?\r\n                        <button className=\"planet-button\" onClick = {()=>this.props.addFavourite(this.props.index,false)}>Remove Favourite</button>\r\n                    :\r\n                        <button className=\"planet-button\" onClick = {()=>this.props.addFavourite(this.props.index,true)}>Add Favourite</button>\r\n                }            \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Planet;","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport './Planets.scss';\r\nimport Planet from './Planet';\r\nclass Index extends Component{\r\n    constructor(){\r\n        super();\r\n        th\r\n        is.state={\r\n            allPlanets : []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axios.get(\"https://assignment-machstatz.herokuapp.com/planet\")\r\n        .then(res=>{\r\n            this.setState({\r\n                allPlanets : res.data\r\n            })\r\n        })\r\n        .catch(error=>{\r\n            console.log(error);\r\n        })\r\n    }\r\n    addFavourite = (index,favourite)=>{\r\n        let planets = this.state.allPlanets;\r\n        planets[index].isFavourite = favourite;\r\n        this.setState({\r\n            allPlanets : planets\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                <div className=\"planets-container\">\r\n                    <div className=\"title\">All Planets</div>\r\n                    <div className=\"all-planets\">\r\n                        {\r\n                            this.state.allPlanets && this.state.allPlanets.map((planet,index)=>{\r\n                                return !planet?.isFavourite && <Planet planet={planet} index = {index} addFavourite={this.addFavourite}/>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"planets-container\">\r\n                    <div className=\"title\">Favourite Planets</div>\r\n                    <div className=\"all-planets\">\r\n                        {\r\n                            this.state.allPlanets && this.state.allPlanets.map((planet,index)=>{\r\n                                return planet?.isFavourite && <Planet planet={planet} index = {index} addFavourite={this.addFavourite}/>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Index;","import React, { Component} from 'react';\r\nimport Planets from './components/Planets/Planets';\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Planets/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}